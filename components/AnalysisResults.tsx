
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { cn } from "@/lib/utils";
import { Tag, Eye, AlertTriangle } from "lucide-react";
import { VisionAnalysisResult, VisionAnnotation } from "@/lib/types/story";

interface AnalysisResultsProps {
  results: VisionAnalysisResult;
  imageSrc: string;
  className?: string;
}

const AnalysisResults = ({ results, imageSrc, className }: AnalysisResultsProps) => {
  if (results.error) {
    return (
      <Card className={cn("animate-scale-in", className)}>
        <CardHeader>
          <CardTitle className="flex items-center text-destructive">
            <AlertTriangle className="mr-2" size={20} />
            Error Analyzing Image
          </CardTitle>
        </CardHeader>
        <CardContent>
          <p>{results.error}</p>
        </CardContent>
      </Card>
    );
  }

  // Function to render label items with animation delay
  const renderItems = (items: VisionAnnotation[] = [], icon: JSX.Element) => {
    if (!items.length) {
      return <p className="text-muted-foreground">No items detected</p>;
    }

    return (
      <div className="flex flex-wrap gap-2 mt-2">
        {items.map((item, index) => (
          <Badge
            key={`${item.description}-${index}`}
            variant="outline"
            className={cn(
              "text-sm py-1.5 px-3 bg-background animate-fade-in",
              "transition-all duration-300 hover:bg-primary/5 hover:border-primary/30"
            )}
            style={{ animationDelay: `${index * 100}ms` }}
          >
            <span className="mr-2 opacity-70">{icon}</span>
            <span className="font-medium">{item.description}</span>
            <span className="ml-1.5 text-xs text-muted-foreground">
              {Math.round(item.score * 100)}%
            </span>
          </Badge>
        ))}
      </div>
    );
  };

  return (
    <Card className={cn("overflow-hidden animate-scale-in", className)}>
      <CardHeader>
        <CardTitle className="text-2xl">Analysis Results</CardTitle>
      </CardHeader>

      <Tabs defaultValue="labels" className="w-full">
        <div className="px-6">
          <TabsList className="w-full grid grid-cols-2">
            <TabsTrigger value="labels">What's in the drawing?</TabsTrigger>
            <TabsTrigger value="objects">Objects Detected</TabsTrigger>
          </TabsList>
        </div>

        <TabsContent value="labels" className="mt-4 p-6 pt-2">
          <p className="text-muted-foreground mb-4 text-sm">
            Here are the concepts and elements detected in the drawing:
          </p>
          {renderItems(results.labels, <Tag size={14} />)}
        </TabsContent>

        <TabsContent value="objects" className="mt-4 p-6 pt-2">
          <p className="text-muted-foreground mb-4 text-sm">
            Specific objects identified in the drawing:
          </p>
          {renderItems(results.objects, <Eye size={14} />)}
        </TabsContent>
      </Tabs>

      <div className="p-6 pt-0">
        <hr className="my-4 border-border" />
        <p className="text-xs text-muted-foreground mt-2">
          Results generated by Google Cloud Vision API. Confidence scores represent the AI's certainty in its detection.
        </p>
      </div>
    </Card>
  );
};

export default AnalysisResults;
